# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Note(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, text=None, type=None, patient_id=None):  # noqa: E501
        """Note - a model defined in OpenAPI

        :param id: The id of this Note.  # noqa: E501
        :type id: str
        :param text: The text of this Note.  # noqa: E501
        :type text: str
        :param type: The type of this Note.  # noqa: E501
        :type type: str
        :param patient_id: The patient_id of this Note.  # noqa: E501
        :type patient_id: str
        """
        self.openapi_types = {
            'id': str,
            'text': str,
            'type': str,
            'patient_id': str
        }

        self.attribute_map = {
            'id': 'id',
            'text': 'text',
            'type': 'type',
            'patient_id': 'patientId'
        }

        self._id = id
        self._text = text
        self._type = type
        self._patient_id = patient_id

    @classmethod
    def from_dict(cls, dikt) -> 'Note':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Note of this Note.  # noqa: E501
        :rtype: Note
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Note.

        The ID of the note  # noqa: E501

        :return: The id of this Note.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Note.

        The ID of the note  # noqa: E501

        :param id: The id of this Note.
        :type id: str
        """

        self._id = id

    @property
    def text(self):
        """Gets the text of this Note.

        A text  # noqa: E501

        :return: The text of this Note.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Note.

        A text  # noqa: E501

        :param text: The text of this Note.
        :type text: str
        """

        self._text = text

    @property
    def type(self):
        """Gets the type of this Note.

        The note type (LOINC concept)  # noqa: E501

        :return: The type of this Note.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Note.

        The note type (LOINC concept)  # noqa: E501

        :param type: The type of this Note.
        :type type: str
        """

        self._type = type

    @property
    def patient_id(self):
        """Gets the patient_id of this Note.

        The patient ID  # noqa: E501

        :return: The patient_id of this Note.
        :rtype: str
        """
        return self._patient_id

    @patient_id.setter
    def patient_id(self, patient_id):
        """Sets the patient_id of this Note.

        The patient ID  # noqa: E501

        :param patient_id: The patient_id of this Note.
        :type patient_id: str
        """

        self._patient_id = patient_id
