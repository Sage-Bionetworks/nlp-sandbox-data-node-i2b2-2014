# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class AnnotationStore(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, dataset_id=None):  # noqa: E501
        """AnnotationStore - a model defined in OpenAPI

        :param name: The name of this AnnotationStore.  # noqa: E501
        :type name: str
        :param dataset_id: The dataset_id of this AnnotationStore.  # noqa: E501
        :type dataset_id: str
        """
        self.openapi_types = {
            'name': str,
            'dataset_id': str
        }

        self.attribute_map = {
            'name': 'name',
            'dataset_id': 'datasetId'
        }

        self._name = name
        self._dataset_id = dataset_id

    @classmethod
    def from_dict(cls, dikt) -> 'AnnotationStore':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AnnotationStore of this AnnotationStore.  # noqa: E501
        :rtype: AnnotationStore
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this AnnotationStore.

        The name of the store  # noqa: E501

        :return: The name of this AnnotationStore.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnnotationStore.

        The name of the store  # noqa: E501

        :param name: The name of this AnnotationStore.
        :type name: str
        """
        if name is not None and len(name) > 60:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `60`")  # noqa: E501
        if name is not None and len(name) < 3:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `3`")  # noqa: E501
        if name is not None and not re.search(r'^[a-z0-9]+(?:-[a-z0-9]+)*$', name):  # noqa: E501
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-z0-9]+(?:-[a-z0-9]+)*$/`")  # noqa: E501

        self._name = name

    @property
    def dataset_id(self):
        """Gets the dataset_id of this AnnotationStore.

        The ID of the dataset  # noqa: E501

        :return: The dataset_id of this AnnotationStore.
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this AnnotationStore.

        The ID of the dataset  # noqa: E501

        :param dataset_id: The dataset_id of this AnnotationStore.
        :type dataset_id: str
        """

        self._dataset_id = dataset_id
