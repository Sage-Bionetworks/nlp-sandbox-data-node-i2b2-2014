# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.note import Note
from openapi_server.models.page_of_notes_all_of import PageOfNotesAllOf
from openapi_server.models.response_page_metadata import ResponsePageMetadata
from openapi_server.models.response_page_metadata_links import ResponsePageMetadataLinks
from openapi_server import util

from openapi_server.models.note import Note  # noqa: E501
from openapi_server.models.page_of_notes_all_of import PageOfNotesAllOf  # noqa: E501
from openapi_server.models.response_page_metadata import ResponsePageMetadata  # noqa: E501
from openapi_server.models.response_page_metadata_links import ResponsePageMetadataLinks  # noqa: E501

class PageOfNotes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offset=0, limit=10, links=None, notes=None):  # noqa: E501
        """PageOfNotes - a model defined in OpenAPI

        :param offset: The offset of this PageOfNotes.  # noqa: E501
        :type offset: int
        :param limit: The limit of this PageOfNotes.  # noqa: E501
        :type limit: int
        :param links: The links of this PageOfNotes.  # noqa: E501
        :type links: ResponsePageMetadataLinks
        :param notes: The notes of this PageOfNotes.  # noqa: E501
        :type notes: List[Note]
        """
        self.openapi_types = {
            'offset': int,
            'limit': int,
            'links': ResponsePageMetadataLinks,
            'notes': List[Note]
        }

        self.attribute_map = {
            'offset': 'offset',
            'limit': 'limit',
            'links': 'links',
            'notes': 'notes'
        }

        self._offset = offset
        self._limit = limit
        self._links = links
        self._notes = notes

    @classmethod
    def from_dict(cls, dikt) -> 'PageOfNotes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PageOfNotes of this PageOfNotes.  # noqa: E501
        :rtype: PageOfNotes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offset(self):
        """Gets the offset of this PageOfNotes.

        Index of the first result that must be returned  # noqa: E501

        :return: The offset of this PageOfNotes.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this PageOfNotes.

        Index of the first result that must be returned  # noqa: E501

        :param offset: The offset of this PageOfNotes.
        :type offset: int
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")  # noqa: E501
        if offset is not None and offset < 0:  # noqa: E501
            raise ValueError("Invalid value for `offset`, must be a value greater than or equal to `0`")  # noqa: E501

        self._offset = offset

    @property
    def limit(self):
        """Gets the limit of this PageOfNotes.

        Maximum number of results returned  # noqa: E501

        :return: The limit of this PageOfNotes.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this PageOfNotes.

        Maximum number of results returned  # noqa: E501

        :param limit: The limit of this PageOfNotes.
        :type limit: int
        """
        if limit is None:
            raise ValueError("Invalid value for `limit`, must not be `None`")  # noqa: E501
        if limit is not None and limit > 100:  # noqa: E501
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `100`")  # noqa: E501
        if limit is not None and limit < 10:  # noqa: E501
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `10`")  # noqa: E501

        self._limit = limit

    @property
    def links(self):
        """Gets the links of this PageOfNotes.


        :return: The links of this PageOfNotes.
        :rtype: ResponsePageMetadataLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PageOfNotes.


        :param links: The links of this PageOfNotes.
        :type links: ResponsePageMetadataLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links

    @property
    def notes(self):
        """Gets the notes of this PageOfNotes.

        An array of notes  # noqa: E501

        :return: The notes of this PageOfNotes.
        :rtype: List[Note]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this PageOfNotes.

        An array of notes  # noqa: E501

        :param notes: The notes of this PageOfNotes.
        :type notes: List[Note]
        """

        self._notes = notes
