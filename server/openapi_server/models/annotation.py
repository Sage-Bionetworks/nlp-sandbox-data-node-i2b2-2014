# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.annotation_source import AnnotationSource
from openapi_server import util

from openapi_server.models.annotation_source import AnnotationSource  # noqa: E501

class Annotation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, annotation_source=None, annotation_type=None):  # noqa: E501
        """Annotation - a model defined in OpenAPI

        :param id: The id of this Annotation.  # noqa: E501
        :type id: str
        :param annotation_source: The annotation_source of this Annotation.  # noqa: E501
        :type annotation_source: AnnotationSource
        :param annotation_type: The annotation_type of this Annotation.  # noqa: E501
        :type annotation_type: str
        """
        self.openapi_types = {
            'id': str,
            'annotation_source': AnnotationSource,
            'annotation_type': str
        }

        self.attribute_map = {
            'id': 'id',
            'annotation_source': 'annotationSource',
            'annotation_type': 'annotationType'
        }

        self._id = id
        self._annotation_source = annotation_source
        self._annotation_type = annotation_type

    @classmethod
    def from_dict(cls, dikt) -> 'Annotation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Annotation of this Annotation.  # noqa: E501
        :rtype: Annotation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Annotation.

        The ID of the annotation  # noqa: E501

        :return: The id of this Annotation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Annotation.

        The ID of the annotation  # noqa: E501

        :param id: The id of this Annotation.
        :type id: str
        """

        self._id = id

    @property
    def annotation_source(self):
        """Gets the annotation_source of this Annotation.


        :return: The annotation_source of this Annotation.
        :rtype: AnnotationSource
        """
        return self._annotation_source

    @annotation_source.setter
    def annotation_source(self, annotation_source):
        """Sets the annotation_source of this Annotation.


        :param annotation_source: The annotation_source of this Annotation.
        :type annotation_source: AnnotationSource
        """

        self._annotation_source = annotation_source

    @property
    def annotation_type(self):
        """Gets the annotation_type of this Annotation.

        The type of the annotation  # noqa: E501

        :return: The annotation_type of this Annotation.
        :rtype: str
        """
        return self._annotation_type

    @annotation_type.setter
    def annotation_type(self, annotation_type):
        """Sets the annotation_type of this Annotation.

        The type of the annotation  # noqa: E501

        :param annotation_type: The annotation_type of this Annotation.
        :type annotation_type: str
        """
        allowed_values = ["text_date", "text_person_name", "text_physical_address"]  # noqa: E501
        if annotation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `annotation_type` ({0}), must be one of {1}"
                .format(annotation_type, allowed_values)
            )

        self._annotation_type = annotation_type
